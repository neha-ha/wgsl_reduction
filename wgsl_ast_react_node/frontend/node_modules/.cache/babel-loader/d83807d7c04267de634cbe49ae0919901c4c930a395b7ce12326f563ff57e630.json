{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nehab\\\\webgpu\\\\test\\\\wgsl_ast_react_node\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\n// using axios to simplify POST & GET requests from backend and automatically handles JSON data\nimport axios from \"axios\";\n\n// function to format the AST into a nore readable tree string\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction formatASTString(astString) {\n  let formatted = \"\";\n  let indentLevel = 0;\n  for (let i = 0; i < astString.length; i++) {\n    const char = astString[i];\n    if (char === \"(\") {\n      // Increase indentation and move to a new line\n      indentLevel++;\n      formatted += \"\\n\" + \"  \".repeat(indentLevel);\n    } else if (char === \")\") {\n      // Decrease indentation level\n      indentLevel = Math.max(indentLevel - 1, 0);\n    } else if (char === \" \" && astString[i - 1] === \"(\") {\n      // Skip spaces immediately after opening parentheses\n      continue;\n    } else {\n      // Add the character to the formatted result\n      formatted += char;\n    }\n  }\n  return formatted.trim();\n}\nfunction App() {\n  _s();\n  // states-- react components all have built in state objects\n  // when state object changes, component re-renders\n\n  // usestate(initial value) returns current state and a function that updates the state\n  // so in this, for example, wgslCode represents the current state and setWgslCode is the function that updates the state\n  const [wgslCode, setWgslCode] = useState(\"\");\n  const [ast, setAst] = useState(\"\");\n\n  // async functions-- for tasks that don't finish immediately, like api calls\n\n  // this function is triggered when the user submits the form via button press\n  const handleSubmit = async e => {\n    // prevernts default behaviour of form submission (which would refresh the page)\n    e.preventDefault();\n    try {\n      // send wgsl code and wait for a response from the backend\n      const response = await axios.post(\"http://localhost:5000/wgsl-to-ast\", {\n        code: wgslCode\n      });\n      // change state of the ast textbox to show the returned ast\n      //setAst(response.data.ast);\n      const printable = printNode(response.data.ast);\n      setAst(printable);\n    } catch (error) {\n      console.error(\"Error parsing WGSL:\", error);\n      setAst(\"Error parsing WGSL code\");\n    }\n  };\n\n  // frontend components\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"20px\",\n      fontFamily: \"Arial\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"WGSL AST Generator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: wgslCode,\n        onChange: e => setWgslCode(e.target.value),\n        rows: \"10\",\n        cols: \"50\",\n        placeholder: \"Enter WGSL code here...\",\n        style: {\n          marginBottom: \"10px\",\n          width: \"100%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        style: {\n          padding: \"10px 20px\"\n        },\n        children: \"Generate AST\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Abstract Syntax Tree\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: ast,\n      readOnly: true,\n      rows: \"20\",\n      cols: \"50\",\n      style: {\n        marginTop: \"10px\",\n        width: \"100%\",\n        backgroundColor: \"#f4f4f4\",\n        border: \"1px solid #ccc\",\n        padding: \"10px\",\n        fontFamily: \"monospace\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"7noySXPQGcED+D0AXXdb3Bmh7/o=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","formatASTString","astString","formatted","indentLevel","i","length","char","repeat","Math","max","trim","App","_s","wgslCode","setWgslCode","ast","setAst","handleSubmit","e","preventDefault","response","post","code","printable","printNode","data","error","console","style","padding","fontFamily","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","value","onChange","target","rows","cols","placeholder","marginBottom","width","type","readOnly","marginTop","backgroundColor","border","_c","$RefreshReg$"],"sources":["C:/Users/nehab/webgpu/test/wgsl_ast_react_node/frontend/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\n// using axios to simplify POST & GET requests from backend and automatically handles JSON data\nimport axios from \"axios\";\n\n// function to format the AST into a nore readable tree string\nfunction formatASTString(astString) {\n  let formatted = \"\";\n  let indentLevel = 0;\n\n  for (let i = 0; i < astString.length; i++) {\n    const char = astString[i];\n\n    if (char === \"(\") {\n      // Increase indentation and move to a new line\n      indentLevel++;\n      formatted += \"\\n\" + \"  \".repeat(indentLevel);\n    } else if (char === \")\") {\n      // Decrease indentation level\n      indentLevel = Math.max(indentLevel - 1, 0);\n    } else if (char === \" \" && astString[i - 1] === \"(\") {\n      // Skip spaces immediately after opening parentheses\n      continue;\n    } else {\n      // Add the character to the formatted result\n      formatted += char;\n    }\n  }\n\n  return formatted.trim();\n}\nfunction App() {\n  // states-- react components all have built in state objects\n  // when state object changes, component re-renders\n\n  // usestate(initial value) returns current state and a function that updates the state\n  // so in this, for example, wgslCode represents the current state and setWgslCode is the function that updates the state\n  const [wgslCode, setWgslCode] = useState(\"\");\n  const [ast, setAst] = useState(\"\");\n\n  // async functions-- for tasks that don't finish immediately, like api calls\n\n  // this function is triggered when the user submits the form via button press\n  const handleSubmit = async (e) => {\n    // prevernts default behaviour of form submission (which would refresh the page)\n    e.preventDefault();\n\n    try {\n      // send wgsl code and wait for a response from the backend\n      const response = await axios.post(\"http://localhost:5000/wgsl-to-ast\", {\n        code: wgslCode,\n      });\n      // change state of the ast textbox to show the returned ast\n      //setAst(response.data.ast);\n      const printable = printNode(response.data.ast)\n      setAst(printable);\n    } \n    catch (error) {\n      console.error(\"Error parsing WGSL:\", error);\n      setAst(\"Error parsing WGSL code\");\n    }\n  };\n\n  // frontend components\n  return (\n    <div style={{ padding: \"20px\", fontFamily: \"Arial\" }}>\n      <h1>WGSL AST Generator</h1>\n      <form onSubmit={handleSubmit}>\n        <textarea\n          value={wgslCode}\n          onChange={(e) => setWgslCode(e.target.value)}\n          rows=\"10\"\n          cols=\"50\"\n          placeholder=\"Enter WGSL code here...\"\n          style={{ marginBottom: \"10px\", width: \"100%\" }}\n        />\n        <br />\n        <button type=\"submit\" style={{ padding: \"10px 20px\" }}>\n          Generate AST\n        </button>\n      </form>\n      <h2>Abstract Syntax Tree</h2>\n        <textarea\n        value={ast}\n        readOnly\n        rows=\"20\"\n        cols=\"50\"\n        style={{\n          marginTop: \"10px\",\n          width: \"100%\",\n          backgroundColor: \"#f4f4f4\",\n          border: \"1px solid #ccc\",\n          padding: \"10px\",\n          fontFamily: \"monospace\",\n        }}\n      />\n    </div>\n  );\n}\n\nexport default App;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}