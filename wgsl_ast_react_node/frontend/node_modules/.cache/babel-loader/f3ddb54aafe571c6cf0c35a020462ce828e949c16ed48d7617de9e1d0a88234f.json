{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nehab\\\\webgpu\\\\test\\\\wgsl_ast_react_node\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\n// using axios to simplify POST & GET requests from backend and automatically handles JSON data\nimport axios from \"axios\";\n\n// function to format the AST into a nore readable tree string\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction printNode(node, depth = 0) {\n  const indent = \"  \".repeat(depth); // Indentation for tree structure\n  let result = `${indent}${node.type}\\n`; // Add the current node's type to the result\n\n  // Recursively process child nodes\n  for (let i = 0; i < node.childCount; i++) {\n    result += printNode(node.child(i), depth + 1); // Append child node's string\n  }\n  return result; // Return the accumulated result\n}\nfunction App() {\n  _s();\n  // states-- react components all have built in state objects\n  // when state object changes, component re-renders\n\n  // usestate(initial value) returns current state and a function that updates the state\n  // so in this, for example, wgslCode represents the current state and setWgslCode is the function that updates the state\n  const [wgslCode, setWgslCode] = useState(\"\");\n  const [ast, setAst] = useState(\"\");\n\n  // async functions-- for tasks that don't finish immediately, like api calls\n\n  // this function is triggered when the user submits the form via button press\n  const handleSubmit = async e => {\n    // prevernts default behaviour of form submission (which would refresh the page)\n    e.preventDefault();\n    try {\n      // send wgsl code and wait for a response from the backend\n      const response = await axios.post(\"http://localhost:5000/wgsl-to-ast\", {\n        code: wgslCode\n      });\n      // change state of the ast textbox to show the returned ast\n      setAst(response.data.ast);\n      setAst(printNode(response.data.ast));\n    } catch (error) {\n      console.error(\"Error parsing WGSL:\", error);\n      setAst(\"Error parsing WGSL code\");\n    }\n  };\n\n  // frontend components\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"20px\",\n      fontFamily: \"Arial\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"WGSL AST Generator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: wgslCode,\n        onChange: e => setWgslCode(e.target.value),\n        rows: \"10\",\n        cols: \"50\",\n        placeholder: \"Enter WGSL code here...\",\n        style: {\n          marginBottom: \"10px\",\n          width: \"100%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        style: {\n          padding: \"10px 20px\"\n        },\n        children: \"Generate AST\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Abstract Syntax Tree\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: ast,\n      readOnly: true,\n      rows: \"20\",\n      cols: \"50\",\n      style: {\n        marginTop: \"10px\",\n        width: \"100%\",\n        backgroundColor: \"#f4f4f4\",\n        border: \"1px solid #ccc\",\n        padding: \"10px\",\n        fontFamily: \"monospace\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"7noySXPQGcED+D0AXXdb3Bmh7/o=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","printNode","node","depth","indent","repeat","result","type","i","childCount","child","App","_s","wgslCode","setWgslCode","ast","setAst","handleSubmit","e","preventDefault","response","post","code","data","error","console","style","padding","fontFamily","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","value","onChange","target","rows","cols","placeholder","marginBottom","width","readOnly","marginTop","backgroundColor","border","_c","$RefreshReg$"],"sources":["C:/Users/nehab/webgpu/test/wgsl_ast_react_node/frontend/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\n// using axios to simplify POST & GET requests from backend and automatically handles JSON data\nimport axios from \"axios\";\n\n// function to format the AST into a nore readable tree string\nfunction printNode(node, depth = 0) {\n  const indent = \"  \".repeat(depth); // Indentation for tree structure\n  let result = `${indent}${node.type}\\n`; // Add the current node's type to the result\n\n  // Recursively process child nodes\n  for (let i = 0; i < node.childCount; i++) {\n    result += printNode(node.child(i), depth + 1); // Append child node's string\n  }\n\n  return result; // Return the accumulated result\n}\nfunction App() {\n  // states-- react components all have built in state objects\n  // when state object changes, component re-renders\n\n  // usestate(initial value) returns current state and a function that updates the state\n  // so in this, for example, wgslCode represents the current state and setWgslCode is the function that updates the state\n  const [wgslCode, setWgslCode] = useState(\"\");\n  const [ast, setAst] = useState(\"\");\n\n  // async functions-- for tasks that don't finish immediately, like api calls\n\n  // this function is triggered when the user submits the form via button press\n  const handleSubmit = async (e) => {\n    // prevernts default behaviour of form submission (which would refresh the page)\n    e.preventDefault();\n\n    try {\n      // send wgsl code and wait for a response from the backend\n      const response = await axios.post(\"http://localhost:5000/wgsl-to-ast\", {\n        code: wgslCode,\n      });\n      // change state of the ast textbox to show the returned ast\n      setAst(response.data.ast);\n\n      setAst(printNode(response.data.ast));\n    } \n    catch (error) {\n      console.error(\"Error parsing WGSL:\", error);\n      setAst(\"Error parsing WGSL code\");\n    }\n  };\n\n  // frontend components\n  return (\n    <div style={{ padding: \"20px\", fontFamily: \"Arial\" }}>\n      <h1>WGSL AST Generator</h1>\n      <form onSubmit={handleSubmit}>\n        <textarea\n          value={wgslCode}\n          onChange={(e) => setWgslCode(e.target.value)}\n          rows=\"10\"\n          cols=\"50\"\n          placeholder=\"Enter WGSL code here...\"\n          style={{ marginBottom: \"10px\", width: \"100%\" }}\n        />\n        <br />\n        <button type=\"submit\" style={{ padding: \"10px 20px\" }}>\n          Generate AST\n        </button>\n      </form>\n      <h2>Abstract Syntax Tree</h2>\n        <textarea\n        value={ast}\n        readOnly\n        rows=\"20\"\n        cols=\"50\"\n        style={{\n          marginTop: \"10px\",\n          width: \"100%\",\n          backgroundColor: \"#f4f4f4\",\n          border: \"1px solid #ccc\",\n          padding: \"10px\",\n          fontFamily: \"monospace\",\n        }}\n      />\n    </div>\n  );\n}\n\nexport default App;\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC;AACA,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,SAASC,SAASA,CAACC,IAAI,EAAEC,KAAK,GAAG,CAAC,EAAE;EAClC,MAAMC,MAAM,GAAG,IAAI,CAACC,MAAM,CAACF,KAAK,CAAC,CAAC,CAAC;EACnC,IAAIG,MAAM,GAAG,GAAGF,MAAM,GAAGF,IAAI,CAACK,IAAI,IAAI,CAAC,CAAC;;EAExC;EACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,IAAI,CAACO,UAAU,EAAED,CAAC,EAAE,EAAE;IACxCF,MAAM,IAAIL,SAAS,CAACC,IAAI,CAACQ,KAAK,CAACF,CAAC,CAAC,EAAEL,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;EACjD;EAEA,OAAOG,MAAM,CAAC,CAAC;AACjB;AACA,SAASK,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA;;EAEA;EACA;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACkB,GAAG,EAAEC,MAAM,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;;EAElC;;EAEA;EACA,MAAMoB,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChC;IACAA,CAAC,CAACC,cAAc,CAAC,CAAC;IAElB,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,MAAMtB,KAAK,CAACuB,IAAI,CAAC,mCAAmC,EAAE;QACrEC,IAAI,EAAET;MACR,CAAC,CAAC;MACF;MACAG,MAAM,CAACI,QAAQ,CAACG,IAAI,CAACR,GAAG,CAAC;MAEzBC,MAAM,CAACf,SAAS,CAACmB,QAAQ,CAACG,IAAI,CAACR,GAAG,CAAC,CAAC;IACtC,CAAC,CACD,OAAOS,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3CR,MAAM,CAAC,yBAAyB,CAAC;IACnC;EACF,CAAC;;EAED;EACA,oBACEhB,OAAA;IAAK0B,KAAK,EAAE;MAAEC,OAAO,EAAE,MAAM;MAAEC,UAAU,EAAE;IAAQ,CAAE;IAAAC,QAAA,gBACnD7B,OAAA;MAAA6B,QAAA,EAAI;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC3BjC,OAAA;MAAMkC,QAAQ,EAAEjB,YAAa;MAAAY,QAAA,gBAC3B7B,OAAA;QACEmC,KAAK,EAAEtB,QAAS;QAChBuB,QAAQ,EAAGlB,CAAC,IAAKJ,WAAW,CAACI,CAAC,CAACmB,MAAM,CAACF,KAAK,CAAE;QAC7CG,IAAI,EAAC,IAAI;QACTC,IAAI,EAAC,IAAI;QACTC,WAAW,EAAC,yBAAyB;QACrCd,KAAK,EAAE;UAAEe,YAAY,EAAE,MAAM;UAAEC,KAAK,EAAE;QAAO;MAAE;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChD,CAAC,eACFjC,OAAA;QAAA8B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACNjC,OAAA;QAAQO,IAAI,EAAC,QAAQ;QAACmB,KAAK,EAAE;UAAEC,OAAO,EAAE;QAAY,CAAE;QAAAE,QAAA,EAAC;MAEvD;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,eACPjC,OAAA;MAAA6B,QAAA,EAAI;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC3BjC,OAAA;MACAmC,KAAK,EAAEpB,GAAI;MACX4B,QAAQ;MACRL,IAAI,EAAC,IAAI;MACTC,IAAI,EAAC,IAAI;MACTb,KAAK,EAAE;QACLkB,SAAS,EAAE,MAAM;QACjBF,KAAK,EAAE,MAAM;QACbG,eAAe,EAAE,SAAS;QAC1BC,MAAM,EAAE,gBAAgB;QACxBnB,OAAO,EAAE,MAAM;QACfC,UAAU,EAAE;MACd;IAAE;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACrB,EAAA,CAnEQD,GAAG;AAAAoC,EAAA,GAAHpC,GAAG;AAqEZ,eAAeA,GAAG;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}